/* This file construct a class/struct called "mesh" to store various information of the mesh generated by "triangle"
*/
#include <vector>
#include <string>

using namespace std;

#ifndef MESH_DATA
#define MESH_DATA
struct MeshData
{
	/* Nodes */
	size_t num_nodes, num_attributes_per_node, num_marker_per_node;
	vector< vector<double> > nodes;			// coordinates of nodes (num_nodes * 2)
	vector< vector<double> > node_attributes;	// attributes of each node; each node could have multiple attributes.
	vector<int> node_markers;

	/* Edges */
	size_t num_edges;
	size_t num_marker_per_edge;
	vector< vector<int> > edges;			// indices of end nodes of edges (num_edges * 2)
	vector<int> edge_markers;

	/* Elements */
	size_t num_elements;
	size_t num_nodes_per_ele;
	size_t num_attributes_per_ele;
	vector< vector<int> > elements;			// indices of all nodes of element (num_elements * num_nodes_per_ele)
	vector<int> element_markers;			// Assume this is the only attribute each element has!!!

	/* Mesh topology */
	vector< vector<int> > topology2to0;		// nodes of each element (3 for linear element, 6 for quadratic element)
	vector< vector<int> > topology2to1;		// edges of each element (always 3)
	vector< vector<int> > topology2to2;		// neighboring element (always 3)

	vector< vector<int> > topology1to0;		//nodes of edge (always 2)
	vector< vector<int> > topology1to1;		//edges sharing nodes 
	vector< vector<int> > topology1to2;		//elements containing edge (always 2)

	vector< vector<int> > topology0to0;		//neighboring nodes
	vector< vector<int> > topology0to1;		//edges containing node
	vector< vector<int> > topology0to2;		//elements containing node

	/* Mesh properties */
	vector<double> edge_lengths;
	vector<double> ele_areas;
	
};


/********* Need to modify ****************/

int ReadNodes(MeshData&, string);
int ReadEdges(MeshData&, string);
int ReadElements(MeshData&, string);

/* Declare vector operations */
int add_one_entry(vector<int>&, const int&);
int subtract_one_entry(vector<int>&, const int&);
vector<int> intersect_vectors(const vector<int>&, const vector<int>&);
vector<int> merge_vectors(const vector<int>&, const vector<int>&);

int ComputeTopology(MeshData &mesh);

/* Compute geometric properties */
void ComputeElementAreas(MeshData &mesh);
void ComputeEdgeLengths(MeshData &mesh);

/* Write .gnuplot file to plot mesh */
void WriteGNUplot(MeshData &mesh, const string& polyname);

/* Read in mesh information and write to a .poly file as input for "triangle" */
int WritePolyfile(string polyname,
		int num_nodes, double x[], double y[], int num_node_marker, int node_marker[],		// vertices
		int num_seg, int segments[], int num_seg_attr, int seg_attr[],				// segments
		int num_region_attr, double region_x[], double region_y[], int region_attr[]);		// regional attributes


#endif
